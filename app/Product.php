<?php

namespace App;

use Illuminate\Database\Eloquent\Model;
use App\ProductPrice;
use Sofa\Eloquence\Eloquence;

class Product extends Model
{
    protected $guarded = [];

    protected $table = 'products';

    public function addCategories($categories)
    {
    	return $this->categories()->sync($categories);
    }

    public function getFirstProductCatName()
    {
        return $this->categories->first()->name;
    }
    public function getFirstProductCatSlug()
    {

        return $this->categories->first()->slug;
    }

    public function addPrices($quantity_from, $quantity_to, $prices, $unit, $update = false)
    {

        //if this is an update first delete old prices
        if( $update ){
            $this->prices()->delete();
        }
        
        $count = 0;

        //foreach price generated by the form
        foreach($prices as $price){

            $this->prices()->create([
                'quantity_from' => $quantity_from[$count],
                'quantity_to'   => $quantity_to[$count],
                'price'         => $price,
                'unit_id'       => $unit[$count]
            ]);

            $count++;
        }
       
    }

    public function getImageAttribute($value)
    {
        return asset('storage/' . $value);
    }

    public function categories()
    {
    	return $this->belongsToMany(Category::class, 'category_product', 'product_id', 'category_id' );           
    }

    public function prices()
    {
        return $this->hasMany(ProductPrice::class);
    }
}
